package com.ohgiraffers.section01.array;

public class Etc {

    // 배열의 new 라는 키워드를 만나는 순간 heap 영역에 작성되는게 생겨요
    // int [] iarr = new int[5]
    // stack 에 int[]arr 이 생기고 new 라는 것을 만나는 순간 heap 에 5칸짜리 공간을 만들어요
    // 그리고 각자 방에는 방번호가 있고 인덱스 체계로 0 부터 시작합니다.
    // iarr 값은 주소를 보관하고 있습니다. 값을 가진 것이 아닙니다.
    // sout(iarr) : [I@das3123123] 같이 주소를 가져요 주소를 가지고 있다고 해서 레퍼런스 변수라고 불러요.
    // 스택주소가 가르키는 값 heap에 값을 집어넣을 수 있습니다. sout(iarr[4]) 이런 식으로요
    // 내가 5칸 짜리 방을 만들었는데 마음이 바끼었어 6칸 짜리 배열을 만들고 싶어요
    // 그러면 iarr = new int[6]; 기존 new int[5]는 끊고 heap 에서 다른 영역으로 가게 되요 
    // new 라는 것은 항상 새로운 공간을 만들어 준다는 것
    // 다시 null 이라고 대입을 한다면 에러가 발생 주소를 출력하고 싶은데 주소를 출력하지 못하기 때문이에요 
    // heap 메모리 영역은 비어있는 값이 존재할수없다고 합니다. int x; x=10;은 대입할수 있는데;
    // 배열은 값은 반드시 넣어져야만 합니다. 그러나 없다면 기본값들이 들어갑니아.

    //얕은 복사
    //int []arr1 = new int[];
    //int []arr2 = arr1; 스택은 arr1 arr2가 있는데 힙에서 1개의 동일한 주소를 가르키게 됩니다.
    //첫번째는 arr1[0]=1로 했는데 arr2[0]=3라고 하면 어떻게 될까요 그럼 3이 됩니다.
    // arr2[0]=3이 됩니다. 
    
    //변수와 배열차이 : 변수는 1나 배열은 여러개
    //배열은 자료형이 고정됨
    //회원가입할때 여러가지 자료형이 필요한데 이를 극복한 것이 클래스이다. 클래스가 자료형입니다.
    //배열은 같은 자료형만 여러개 .. 근데 클래스는 자료형 다 넣을 수 있어요
    //클래스는 변수 메소드 둘 다 넣을 수 있어요.
    //그러나 클래스도 자료형을 맞추어 줘야한다.
    //Monster 라는 클래스를 만들었다고 해요 Monster mon1 = new Monster();
    //Poohbao po = new Poohbao(); Monster와 Poohbao는 자료형이 다른 것입니다.

}
